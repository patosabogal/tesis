# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "ADDRESS APPROVES BOOL BOOLEAN_BOOLEAN_OPERATOR DOT DOUBLE_QUOTE EQUALITY_OPERATOR GLOBAL_FIELD GLOBAL_STORAGE GROUP_TXN LBRACKET LOCAL_STORAGE LPAREN NUMBER NUMERIC_BOOLEAN_OPERATOR NUMERIC_NUMERIC_OPERATOR QUOTE RBRACKET RPAREN STRING TXNA_FIELD TXN_FIELD\n    boolean_expression : boolean_expression BOOLEAN_BOOLEAN_OPERATOR boolean_term\n    boolean_expression : boolean_expression EQUALITY_OPERATOR boolean_term\n    boolean_expression : numeric_expression EQUALITY_OPERATOR numeric_term\n    boolean_expression : string_expression EQUALITY_OPERATOR string_term\n    boolean_expression : storage_expression EQUALITY_OPERATOR string_term\n    boolean_expression : storage_expression EQUALITY_OPERATOR numeric_expression\n    boolean_expression : approves_expression EQUALITY_OPERATOR boolean_term\n    boolean_expression : gtxn_expression EQUALITY_OPERATOR string_term\n    boolean_expression : gtxn_expression EQUALITY_OPERATOR gtxn_term\n    boolean_expression : gtxn_expression EQUALITY_OPERATOR numeric_term\n    boolean_expression : numeric_expression EQUALITY_OPERATOR gtxn_term\n    boolean_expression : global_field_expression EQUALITY_OPERATOR numeric_expression\n    boolean_expression : gtxn_expression NUMERIC_BOOLEAN_OPERATOR numeric_expression\n    boolean_expression : storage_expression NUMERIC_BOOLEAN_OPERATOR numeric_expression\n    boolean_expression : numeric_expression NUMERIC_BOOLEAN_OPERATOR numeric_term\n    numeric_expression : numeric_expression NUMERIC_NUMERIC_OPERATOR numeric_term\n    numeric_expression : gtxn_expression NUMERIC_NUMERIC_OPERATOR numeric_term\n    numeric_expression : gtxn_expression NUMERIC_NUMERIC_OPERATOR gtxn_term\n    numeric_expression : numeric_expression NUMERIC_NUMERIC_OPERATOR gtxn_term\n    numeric_factor : LPAREN numeric_expression RPAREN\n    boolean_factor : LPAREN boolean_expression RPAREN\n    \n    boolean_expression : boolean_term\n    boolean_term : boolean_factor\n    boolean_factor : BOOL\n    numeric_expression : numeric_term\n    numeric_term : numeric_factor\n    numeric_factor : NUMBER\n    string_expression : string_term\n    string_term : string_factor\n    storage_expression : storage_term\n    approves_expression : approves_term\n    approves_term : approves_factor\n    approves_factor : APPROVES\n    gtxn_expression : gtxn_term\n    global_field_expression : global_field_term\n    global_field_term : global_field_factor\n    global_field_factor : GLOBAL_FIELD\n    \n    string_factor : QUOTE STRING QUOTE\n    string_factor : DOUBLE_QUOTE STRING DOUBLE_QUOTE\n    address_factor : QUOTE ADDRESS QUOTE\n    address_factor : DOUBLE_QUOTE ADDRESS DOUBLE_QUOTE\n    \n    storage_term : GLOBAL_STORAGE LBRACKET numeric_factor RBRACKET\n    storage_term : GLOBAL_STORAGE LBRACKET string_factor RBRACKET\n    \n    storage_term : LOCAL_STORAGE LBRACKET address_factor RBRACKET LBRACKET RBRACKET\n    storage_term : LOCAL_STORAGE LBRACKET address_factor RBRACKET LBRACKET string_factor RBRACKET\n    \n    gtxn_term : GROUP_TXN LBRACKET numeric_factor RBRACKET DOT txn_field_factor\n    \n    gtxn_term : GROUP_TXN LBRACKET numeric_factor RBRACKET DOT txna_field_factor LBRACKET numeric_factor RBRACKET\n    \n    gtxn_term : txn_field_factor\n    \n    gtxn_term : txna_field_factor LBRACKET numeric_factor RBRACKET\n    \n    txn_field_factor : TXN_FIELD\n    \n    txna_field_factor : TXNA_FIELD\n    "

_lr_action_items = {
    "GLOBAL_STORAGE": (
        [
            0,
            25,
            56,
        ],
        [
            18,
            18,
            18,
        ],
    ),
    "LOCAL_STORAGE": (
        [
            0,
            25,
            56,
        ],
        [
            19,
            19,
            19,
        ],
    ),
    "GROUP_TXN": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
        ],
        [
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
            21,
        ],
    ),
    "LPAREN": (
        [
            0,
            25,
            34,
            35,
            36,
            37,
            38,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            49,
            50,
            56,
            60,
            105,
        ],
        [
            25,
            25,
            56,
            56,
            60,
            60,
            60,
            60,
            60,
            56,
            60,
            60,
            60,
            60,
            60,
            60,
            60,
            25,
            60,
            60,
        ],
    ),
    "BOOL": (
        [
            0,
            25,
            34,
            35,
            42,
            56,
        ],
        [
            26,
            26,
            26,
            26,
            26,
            26,
        ],
    ),
    "NUMBER": (
        [
            0,
            25,
            36,
            37,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            47,
            49,
            50,
            56,
            60,
            105,
        ],
        [
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
        ],
    ),
    "QUOTE": (
        [
            0,
            25,
            39,
            40,
            43,
            47,
            48,
            53,
            56,
            92,
            96,
        ],
        [
            28,
            28,
            28,
            28,
            28,
            28,
            80,
            86,
            28,
            97,
            28,
        ],
    ),
    "DOUBLE_QUOTE": (
        [
            0,
            25,
            39,
            40,
            43,
            47,
            48,
            54,
            56,
            93,
            96,
        ],
        [
            29,
            29,
            29,
            29,
            29,
            29,
            81,
            87,
            29,
            98,
            29,
        ],
    ),
    "APPROVES": (
        [
            0,
            25,
            56,
        ],
        [
            30,
            30,
            30,
        ],
    ),
    "TXN_FIELD": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
            99,
        ],
        [
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
            31,
        ],
    ),
    "TXNA_FIELD": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
            99,
        ],
        [
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
            32,
        ],
    ),
    "GLOBAL_FIELD": (
        [
            0,
            25,
            56,
        ],
        [
            33,
            33,
            33,
        ],
    ),
    "$end": (
        [
            1,
            2,
            4,
            15,
            16,
            17,
            22,
            26,
            27,
            31,
            55,
            57,
            58,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            84,
            85,
            86,
            87,
            95,
            102,
            107,
        ],
        [
            0,
            -22,
            -25,
            -23,
            -26,
            -29,
            -48,
            -24,
            -27,
            -50,
            -1,
            -2,
            -3,
            -11,
            -15,
            -16,
            -19,
            -4,
            -5,
            -6,
            -14,
            -7,
            -8,
            -9,
            -10,
            -13,
            -17,
            -18,
            -12,
            -21,
            -20,
            -38,
            -39,
            -49,
            -46,
            -47,
        ],
    ),
    "BOOLEAN_BOOLEAN_OPERATOR": (
        [
            1,
            2,
            4,
            15,
            16,
            17,
            22,
            26,
            27,
            31,
            51,
            55,
            57,
            58,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            84,
            85,
            86,
            87,
            95,
            102,
            107,
        ],
        [
            34,
            -22,
            -25,
            -23,
            -26,
            -29,
            -48,
            -24,
            -27,
            -50,
            34,
            -1,
            -2,
            -3,
            -11,
            -15,
            -16,
            -19,
            -4,
            -5,
            -6,
            -14,
            -7,
            -8,
            -9,
            -10,
            -13,
            -17,
            -18,
            -12,
            -21,
            -20,
            -38,
            -39,
            -49,
            -46,
            -47,
        ],
    ),
    "EQUALITY_OPERATOR": (
        [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            20,
            22,
            24,
            26,
            27,
            30,
            31,
            33,
            51,
            52,
            55,
            57,
            58,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            84,
            85,
            86,
            87,
            89,
            90,
            95,
            100,
            102,
            104,
            107,
        ],
        [
            35,
            -22,
            36,
            -25,
            39,
            -28,
            40,
            42,
            43,
            -34,
            46,
            -30,
            -31,
            -35,
            -23,
            -26,
            -29,
            -32,
            -48,
            -36,
            -24,
            -27,
            -33,
            -50,
            -37,
            35,
            36,
            -1,
            -2,
            -3,
            -11,
            -15,
            -16,
            -19,
            -4,
            -5,
            -6,
            -14,
            -7,
            -8,
            -9,
            -10,
            -13,
            -17,
            -18,
            -12,
            -21,
            -20,
            -38,
            -39,
            -42,
            -43,
            -49,
            -44,
            -46,
            -45,
            -47,
        ],
    ),
    "RPAREN": (
        [
            2,
            4,
            15,
            16,
            17,
            22,
            26,
            27,
            31,
            51,
            52,
            55,
            57,
            58,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            84,
            85,
            86,
            87,
            88,
            95,
            102,
            107,
        ],
        [
            -22,
            -25,
            -23,
            -26,
            -29,
            -48,
            -24,
            -27,
            -50,
            84,
            85,
            -1,
            -2,
            -3,
            -11,
            -15,
            -16,
            -19,
            -4,
            -5,
            -6,
            -14,
            -7,
            -8,
            -9,
            -10,
            -13,
            -17,
            -18,
            -12,
            -21,
            -20,
            -38,
            -39,
            85,
            -49,
            -46,
            -47,
        ],
    ),
    "NUMERIC_BOOLEAN_OPERATOR": (
        [
            3,
            4,
            7,
            9,
            10,
            12,
            16,
            22,
            27,
            31,
            52,
            62,
            63,
            74,
            75,
            85,
            89,
            90,
            95,
            100,
            102,
            104,
            107,
        ],
        [
            37,
            -25,
            41,
            44,
            -34,
            -30,
            -26,
            -48,
            -27,
            -50,
            37,
            -16,
            -19,
            -17,
            -18,
            -20,
            -42,
            -43,
            -49,
            -44,
            -46,
            -45,
            -47,
        ],
    ),
    "NUMERIC_NUMERIC_OPERATOR": (
        [
            3,
            4,
            9,
            10,
            16,
            22,
            27,
            31,
            52,
            62,
            63,
            66,
            67,
            68,
            73,
            74,
            75,
            76,
            85,
            88,
            95,
            102,
            107,
        ],
        [
            38,
            -25,
            45,
            -34,
            -26,
            -48,
            -27,
            -50,
            38,
            -16,
            -19,
            38,
            45,
            38,
            38,
            -17,
            -18,
            38,
            -20,
            38,
            -49,
            -46,
            -47,
        ],
    ),
    "LBRACKET": (
        [
            18,
            19,
            21,
            23,
            32,
            91,
            103,
        ],
        [
            47,
            48,
            49,
            50,
            -51,
            96,
            105,
        ],
    ),
    "RBRACKET": (
        [
            27,
            77,
            78,
            79,
            82,
            83,
            85,
            86,
            87,
            96,
            97,
            98,
            101,
            106,
        ],
        [
            -27,
            89,
            90,
            91,
            94,
            95,
            -20,
            -38,
            -39,
            100,
            -40,
            -41,
            104,
            107,
        ],
    ),
    "STRING": (
        [
            28,
            29,
        ],
        [
            53,
            54,
        ],
    ),
    "ADDRESS": (
        [
            80,
            81,
        ],
        [
            92,
            93,
        ],
    ),
    "DOT": (
        [
            94,
        ],
        [
            99,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "boolean_expression": (
        [
            0,
            25,
            56,
        ],
        [
            1,
            51,
            51,
        ],
    ),
    "boolean_term": (
        [
            0,
            25,
            34,
            35,
            42,
            56,
        ],
        [
            2,
            2,
            55,
            57,
            69,
            2,
        ],
    ),
    "numeric_expression": (
        [
            0,
            25,
            40,
            41,
            44,
            46,
            56,
            60,
        ],
        [
            3,
            52,
            66,
            68,
            73,
            76,
            3,
            88,
        ],
    ),
    "numeric_term": (
        [
            0,
            25,
            36,
            37,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
        ],
        [
            4,
            4,
            58,
            61,
            62,
            4,
            4,
            72,
            4,
            74,
            4,
            4,
            4,
        ],
    ),
    "string_expression": (
        [
            0,
            25,
            56,
        ],
        [
            5,
            5,
            5,
        ],
    ),
    "string_term": (
        [
            0,
            25,
            39,
            40,
            43,
            56,
        ],
        [
            6,
            6,
            64,
            65,
            70,
            6,
        ],
    ),
    "storage_expression": (
        [
            0,
            25,
            56,
        ],
        [
            7,
            7,
            7,
        ],
    ),
    "approves_expression": (
        [
            0,
            25,
            56,
        ],
        [
            8,
            8,
            8,
        ],
    ),
    "gtxn_expression": (
        [
            0,
            25,
            40,
            41,
            44,
            46,
            56,
            60,
        ],
        [
            9,
            9,
            67,
            67,
            67,
            67,
            9,
            67,
        ],
    ),
    "gtxn_term": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
        ],
        [
            10,
            10,
            59,
            63,
            10,
            10,
            71,
            10,
            75,
            10,
            10,
            10,
        ],
    ),
    "global_field_expression": (
        [
            0,
            25,
            56,
        ],
        [
            11,
            11,
            11,
        ],
    ),
    "storage_term": (
        [
            0,
            25,
            56,
        ],
        [
            12,
            12,
            12,
        ],
    ),
    "approves_term": (
        [
            0,
            25,
            56,
        ],
        [
            13,
            13,
            13,
        ],
    ),
    "global_field_term": (
        [
            0,
            25,
            56,
        ],
        [
            14,
            14,
            14,
        ],
    ),
    "boolean_factor": (
        [
            0,
            25,
            34,
            35,
            42,
            56,
        ],
        [
            15,
            15,
            15,
            15,
            15,
            15,
        ],
    ),
    "numeric_factor": (
        [
            0,
            25,
            36,
            37,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            47,
            49,
            50,
            56,
            60,
            105,
        ],
        [
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            77,
            82,
            83,
            16,
            16,
            106,
        ],
    ),
    "string_factor": (
        [
            0,
            25,
            39,
            40,
            43,
            47,
            56,
            96,
        ],
        [
            17,
            17,
            17,
            17,
            17,
            78,
            17,
            101,
        ],
    ),
    "approves_factor": (
        [
            0,
            25,
            56,
        ],
        [
            20,
            20,
            20,
        ],
    ),
    "txn_field_factor": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
            99,
        ],
        [
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            22,
            102,
        ],
    ),
    "txna_field_factor": (
        [
            0,
            25,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            56,
            60,
            99,
        ],
        [
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            23,
            103,
        ],
    ),
    "global_field_factor": (
        [
            0,
            25,
            56,
        ],
        [
            24,
            24,
            24,
        ],
    ),
    "address_factor": (
        [
            48,
        ],
        [
            79,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> boolean_expression", "S'", 1, None, None, None),
    (
        "boolean_expression -> boolean_expression BOOLEAN_BOOLEAN_OPERATOR boolean_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        12,
    ),
    (
        "boolean_expression -> boolean_expression EQUALITY_OPERATOR boolean_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        13,
    ),
    (
        "boolean_expression -> numeric_expression EQUALITY_OPERATOR numeric_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        14,
    ),
    (
        "boolean_expression -> string_expression EQUALITY_OPERATOR string_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        15,
    ),
    (
        "boolean_expression -> storage_expression EQUALITY_OPERATOR string_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        16,
    ),
    (
        "boolean_expression -> storage_expression EQUALITY_OPERATOR numeric_expression",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        17,
    ),
    (
        "boolean_expression -> approves_expression EQUALITY_OPERATOR boolean_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        18,
    ),
    (
        "boolean_expression -> gtxn_expression EQUALITY_OPERATOR string_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        19,
    ),
    (
        "boolean_expression -> gtxn_expression EQUALITY_OPERATOR gtxn_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        20,
    ),
    (
        "boolean_expression -> gtxn_expression EQUALITY_OPERATOR numeric_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        21,
    ),
    (
        "boolean_expression -> numeric_expression EQUALITY_OPERATOR gtxn_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        22,
    ),
    (
        "boolean_expression -> global_field_expression EQUALITY_OPERATOR numeric_expression",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        23,
    ),
    (
        "boolean_expression -> gtxn_expression NUMERIC_BOOLEAN_OPERATOR numeric_expression",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        24,
    ),
    (
        "boolean_expression -> storage_expression NUMERIC_BOOLEAN_OPERATOR numeric_expression",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        25,
    ),
    (
        "boolean_expression -> numeric_expression NUMERIC_BOOLEAN_OPERATOR numeric_term",
        "boolean_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        26,
    ),
    (
        "numeric_expression -> numeric_expression NUMERIC_NUMERIC_OPERATOR numeric_term",
        "numeric_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        27,
    ),
    (
        "numeric_expression -> gtxn_expression NUMERIC_NUMERIC_OPERATOR numeric_term",
        "numeric_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        28,
    ),
    (
        "numeric_expression -> gtxn_expression NUMERIC_NUMERIC_OPERATOR gtxn_term",
        "numeric_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        29,
    ),
    (
        "numeric_expression -> numeric_expression NUMERIC_NUMERIC_OPERATOR gtxn_term",
        "numeric_expression",
        3,
        "p_triple_tokens",
        "parser.py",
        30,
    ),
    (
        "numeric_factor -> LPAREN numeric_expression RPAREN",
        "numeric_factor",
        3,
        "p_triple_tokens",
        "parser.py",
        31,
    ),
    (
        "boolean_factor -> LPAREN boolean_expression RPAREN",
        "boolean_factor",
        3,
        "p_triple_tokens",
        "parser.py",
        32,
    ),
    (
        "boolean_expression -> boolean_term",
        "boolean_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        39,
    ),
    (
        "boolean_term -> boolean_factor",
        "boolean_term",
        1,
        "p_unary_tokens",
        "parser.py",
        40,
    ),
    ("boolean_factor -> BOOL", "boolean_factor", 1, "p_unary_tokens", "parser.py", 41),
    (
        "numeric_expression -> numeric_term",
        "numeric_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        42,
    ),
    (
        "numeric_term -> numeric_factor",
        "numeric_term",
        1,
        "p_unary_tokens",
        "parser.py",
        43,
    ),
    (
        "numeric_factor -> NUMBER",
        "numeric_factor",
        1,
        "p_unary_tokens",
        "parser.py",
        44,
    ),
    (
        "string_expression -> string_term",
        "string_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        45,
    ),
    (
        "string_term -> string_factor",
        "string_term",
        1,
        "p_unary_tokens",
        "parser.py",
        46,
    ),
    (
        "storage_expression -> storage_term",
        "storage_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        47,
    ),
    (
        "approves_expression -> approves_term",
        "approves_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        48,
    ),
    (
        "approves_term -> approves_factor",
        "approves_term",
        1,
        "p_unary_tokens",
        "parser.py",
        49,
    ),
    (
        "approves_factor -> APPROVES",
        "approves_factor",
        1,
        "p_unary_tokens",
        "parser.py",
        50,
    ),
    (
        "gtxn_expression -> gtxn_term",
        "gtxn_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        51,
    ),
    (
        "global_field_expression -> global_field_term",
        "global_field_expression",
        1,
        "p_unary_tokens",
        "parser.py",
        52,
    ),
    (
        "global_field_term -> global_field_factor",
        "global_field_term",
        1,
        "p_unary_tokens",
        "parser.py",
        53,
    ),
    (
        "global_field_factor -> GLOBAL_FIELD",
        "global_field_factor",
        1,
        "p_unary_tokens",
        "parser.py",
        54,
    ),
    (
        "string_factor -> QUOTE STRING QUOTE",
        "string_factor",
        3,
        "p_string_address_factor",
        "parser.py",
        62,
    ),
    (
        "string_factor -> DOUBLE_QUOTE STRING DOUBLE_QUOTE",
        "string_factor",
        3,
        "p_string_address_factor",
        "parser.py",
        63,
    ),
    (
        "address_factor -> QUOTE ADDRESS QUOTE",
        "address_factor",
        3,
        "p_string_address_factor",
        "parser.py",
        64,
    ),
    (
        "address_factor -> DOUBLE_QUOTE ADDRESS DOUBLE_QUOTE",
        "address_factor",
        3,
        "p_string_address_factor",
        "parser.py",
        65,
    ),
    (
        "storage_term -> GLOBAL_STORAGE LBRACKET numeric_factor RBRACKET",
        "storage_term",
        4,
        "p_global_storage_term",
        "parser.py",
        72,
    ),
    (
        "storage_term -> GLOBAL_STORAGE LBRACKET string_factor RBRACKET",
        "storage_term",
        4,
        "p_global_storage_term",
        "parser.py",
        73,
    ),
    (
        "storage_term -> LOCAL_STORAGE LBRACKET address_factor RBRACKET LBRACKET RBRACKET",
        "storage_term",
        6,
        "p_local_storage_term",
        "parser.py",
        80,
    ),
    (
        "storage_term -> LOCAL_STORAGE LBRACKET address_factor RBRACKET LBRACKET string_factor RBRACKET",
        "storage_term",
        7,
        "p_local_storage_term",
        "parser.py",
        81,
    ),
    (
        "gtxn_term -> GROUP_TXN LBRACKET numeric_factor RBRACKET DOT txn_field_factor",
        "gtxn_term",
        6,
        "p_group_transaction_field_term",
        "parser.py",
        88,
    ),
    (
        "gtxn_term -> GROUP_TXN LBRACKET numeric_factor RBRACKET DOT txna_field_factor LBRACKET numeric_factor RBRACKET",
        "gtxn_term",
        9,
        "p_group_transaction_array_field_term",
        "parser.py",
        95,
    ),
    (
        "gtxn_term -> txn_field_factor",
        "gtxn_term",
        1,
        "p_txn_field_term",
        "parser.py",
        102,
    ),
    (
        "gtxn_term -> txna_field_factor LBRACKET numeric_factor RBRACKET",
        "gtxn_term",
        4,
        "p_txna_field_term",
        "parser.py",
        109,
    ),
    (
        "txn_field_factor -> TXN_FIELD",
        "txn_field_factor",
        1,
        "p_txn_field_factor",
        "parser.py",
        116,
    ),
    (
        "txna_field_factor -> TXNA_FIELD",
        "txna_field_factor",
        1,
        "p_txna_field_factor",
        "parser.py",
        123,
    ),
]
